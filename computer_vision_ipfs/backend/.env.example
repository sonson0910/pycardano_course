# Computer Vision + Blockchain DApp Backend Configuration
# Copy this file to .env and update values for your environment

# ============================================================================
# CARDANO BLOCKCHAIN CONFIGURATION
# ============================================================================

# Network: preprod (Cardano Preprod Testnet) or mainnet
CARDANO_NETWORK=preprod

# Blockfrost API Key - Get from https://blockfrost.io/
# For Preprod testnet:
BLOCKFROST_PROJECT_ID=preprod0K9MnKqsU21MJvqu00V4Laf4pz7dALPK

# Alternative: Kupo URL (optional - for more advanced queries)
CARDANO_KUPO_URL=http://localhost:1442

# Alternative: Ogmios URL (optional - for complex on-chain queries)
CARDANO_OGMIOS_URL=http://localhost:1337

# ============================================================================
# IPFS CONFIGURATION
# ============================================================================

# IPFS Gateway URL
# Option 1: Local Kubo node (recommended for development)
IPFS_GATEWAY_URL=http://localhost:5001

# Option 2: Public gateway (if no local node)
# IPFS_GATEWAY_URL=https://ipfs.io

# Pinata JWT - Get from https://pinata.cloud/
# Used for persistent pinning of face embeddings
# Leave empty to use local IPFS only
PINATA_JWT=

# ============================================================================
# API CONFIGURATION
# ============================================================================

# API host and port
API_HOST=0.0.0.0
API_PORT=8000

# Debug mode (True = detailed logs, False = production)
DEBUG=False

# ============================================================================
# FACE DETECTION CONFIGURATION
# ============================================================================

# Confidence threshold for face detection (0.0 - 1.0)
# Higher = only confident detections, Lower = more detections
FACE_DETECTION_CONFIDENCE=0.5

# Maximum number of faces to track simultaneously
MAX_TRACKED_FACES=10

# ============================================================================
# CORS CONFIGURATION (For Frontend Integration)
# ============================================================================

# Allowed origins for API requests (comma-separated)
# Local development:
CORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000,http://127.0.0.1:5173

# Production (update with your frontend domain):
# CORS_ORIGINS=https://yourdomain.com,https://www.yourdomain.com

# ============================================================================
# DATABASE CONFIGURATION (Optional)
# ============================================================================

# SQLAlchemy database URL (optional - for storing transaction history)
# SQLite (development):
DATABASE_URL=sqlite:///./app.db

# PostgreSQL (production):
# DATABASE_URL=postgresql://user:password@localhost:5432/computer_vision_db

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================

# JWT secret key for API authentication (optional)
# Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"
JWT_SECRET_KEY=your-secret-key-here

# Admin API key for protected endpoints
ADMIN_API_KEY=

# ============================================================================
# WALLET CONFIGURATION (Optional - for automatic TX signing)
# ============================================================================

# Path to Cardano signing key file
# SIGNING_KEY_PATH=./me_preprod.sk

# Wallet password (if key is encrypted)
# WALLET_PASSWORD=your-wallet-password

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================

# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# ============================================================================
# TESTING CONFIGURATION (Development Only)
# ============================================================================

# Use test fixtures instead of real blockchain
# TEST_MODE=False

# Test wallet address (for testing without real ADA)
# TEST_WALLET_ADDRESS=addr_test1vpx302mqdefht0wly42wlpjmd2rm7xr85j6sgvej8pywusc38sglh
